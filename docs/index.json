{"repository_name":"github.com/elbywan/bson.cr","body":"# bson\n\nA pure Crystal implementation of the [BSON specification](http://bsonspec.org).\n\n## Reliability\n\nThis library passes the official corpus tests located in the [`mongodb/specifications`](https://github.com/mongodb/specifications) repository.\n\n*A few [minor](https://github.com/elbywan/bson.cr/tree/master/spec/corpus) modifications have been made to the tests to comply with Crystal specifics.*\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     bson:\n       github: elbywan/bson.cr\n   ```\n\n2. Run `shards install`\n\n## API\n\n[Full API documentation is hosted here.](https://elbywan.github.io/bson.cr/BSON.html)\n\n## Usage\n\n```crystal\nrequire \"bson\"\n```\n\n### Constructors\n\n```crystal\n# Constructor from a NamedTuple…\nbson = BSON.new({\n  hello: \"world\"\n})\n…or a Hash…\nbson = BSON.new({\n  \"hello\" => \"world\"\n})\n…or hex binary representation…\nbson = BSON.new(BSON.new(\"160000000268656c6c6f0006000000776f726c640000\".hexbytes))\n…or JSON.\nbson = BSON.new(\"160000000268656c6c6f0006000000776f726c640000\".hexbytes)\n```\n\n### Append and fetch values\n\n```crystal\nbson = BSON.new({\n  hello: \"world\"\n})\n\n# Append values\nbson[\"name\"] = BSON.new({\n  first_name: \"John\",\n  last_name: \"Doe\"\n})\n\n# Fetch values\nputs bson[\"name\"].as(BSON).to_canonical_extjson\n# => {\"first_name\":\"John\",\"last_name\":\"Doe\"}\nputs bson[\"404\"]?\n# => nil\n\n# Append another BSON\nother_bson = BSON.new({ other: \"field\" })\nbson.append(other_bson)\nputs bson[\"other\"]\n# => field\n```\n\n### Iterate\n\n```crystal\nbson = BSON.new({\n  one: 1,\n  two: 2.0,\n  three: 3\n})\n\n# Enumerator\nbson.each { |(key, value)|\n  puts \"#{key}, #{value}\"\n  # => one, 1\n  # => two, 2.0\n  # => three, 3\n}\n\n# Iterator\nputs bson.each.map { |(key, value)|\n  value.as(Number) + 1\n}.to_a\n# => [2, 3.0, 4]\n```\n\n### Convert to other structures\n\n```crystal\nbson = BSON.new({\n  one: 1,\n  two: \"2\",\n  binary: Slice[0_u8, 1_u8, 2_u8]\n})\n\npp bson.to_h\n# => {\"one\" => 1, \"two\" => \"2\", \"binary\" => Bytes[0, 1, 2]}\n\npp bson.each.to_a\n# => [{\"one\", 1, Int32, nil}, {\"two\", \"2\", String, nil}, {\"binary\", Bytes[0, 1, 2], Binary, Generic}]\n```\n\n## Decimal128\n\nThe `Decimal128` code has been hastily copied from the (`bson-ruby`)[https://github.com/mongodb/bson-ruby/blob/master/lib/bson/decimal128.rb] library.\nIt works, but performance is low because it uses an intermediate String representation.\n\n## Contributing\n\n1. Fork it (<https://github.com/your-github-user/bson/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [elbywan](https://github.com/your-github-user) - creator and maintainer\n","program":{"html_id":"github.com/elbywan/bson.cr/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/elbywan/bson.cr","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/elbywan/bson.cr/BigInt","path":"BigInt.html","kind":"struct","full_name":"BigInt","name":"BigInt","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Int","kind":"struct","full_name":"Int","name":"Int"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Int","kind":"struct","full_name":"Int","name":"Int"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/decimal128.cr","line_number":8,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `BigInt` can represent arbitrarily large integers.\n\nIt is implemented under the hood with [GMP](https://gmplib.org/).","summary":"<p>A <code><a href=\"BigInt.html\">BigInt</a></code> can represent arbitrarily large integers.</p>","class_methods":[],"constructors":[{"id":"new(bytes:Bytes)-class-method","html_id":"new(bytes:Bytes)-class-method","name":"new","doc":"Initialize from a Byte array.","summary":"<p>Initialize from a Byte array.</p>","abstract":false,"args":[{"name":"bytes","doc":null,"default_value":"","external_name":"bytes","restriction":"Bytes"}],"args_string":"(bytes : Bytes)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr#L18","def":{"name":"new","args":[{"name":"bytes","doc":null,"default_value":"","external_name":"bytes","restriction":"Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bytes)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"bytes-instance-method","html_id":"bytes-instance-method","name":"bytes","doc":"Fetch a copy of the underlying byte representation.","summary":"<p>Fetch a copy of the underlying byte representation.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr#L10","def":{"name":"bytes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ptr = LibGMP.export(nil, out size, -1, 1, -1, 0, self)\nslice = Bytes.new(size)\nslice.copy_from(ptr, size)\nslice\n"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/Bool","path":"Bool.html","kind":"struct","full_name":"Bool","name":"Bool","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/ext/bool.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/bool.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Bool has only two possible values: `true` and `false`. They are constructed using these literals:\n\n```\ntrue  # A Bool that is true\nfalse # A Bool that is false\n```","summary":"<p>Bool has only two possible values: <code>true</code> and <code>false</code>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/bool.cr#L5","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.scalar(self)"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/BSON","path":"BSON.html","kind":"struct","full_name":"BSON","name":"BSON","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/elbywan/bson.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/binary.cr","line_number":3,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/binary.cr"},{"filename":"bson/code.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/code.cr"},{"filename":"bson/dbpointer.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/dbpointer.cr"},{"filename":"bson/decimal128.cr","line_number":23,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr"},{"filename":"bson/keys.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/keys.cr"},{"filename":"bson/object_id.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/object_id.cr"},{"filename":"bson/symbol.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/symbol.cr"},{"filename":"bson/timestamp.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/timestamp.cr"},{"filename":"bson/undefined.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/undefined.cr"},{"filename":"bson/helpers/builder.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/helpers/builder.cr"},{"filename":"bson/helpers/decoder.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/helpers/decoder.cr"},{"filename":"bson.cr","line_number":32,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/elbywan/bson.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"**BSON is a binary format in which zero or more ordered key/value pairs are stored as a single entity.**\n\nBSON [bee · sahn], short for Bin­ary JSON, is a bin­ary-en­coded seri­al­iz­a­tion of JSON-like doc­u­ments.\nLike JSON, BSON sup­ports the em­bed­ding of doc­u­ments and ar­rays with­in oth­er doc­u­ments and ar­rays.\nBSON also con­tains ex­ten­sions that al­low rep­res­ent­a­tion of data types that are not part of the JSON spec.\nFor ex­ample, BSON has a Date type and a BinData type.\n\n[See: http://bsonspec.org/](http://bsonspec.org/)\n\n```\nrequire \"bson\"\n\ndata = BSON.new({\n  hello: \"world\",\n  time: Time.utc,\n  name: BSON.new({\n    first_name: \"John\",\n    last_name: \"Doe\"\n  }),\n  fruits: [ \"Orange\", \"Banana\" ]\n})\n\nputs data.to_json\n# => {\"hello\":\"world\",\"time\":{\"$date\":\"2020-05-18T07:32:13.621000000Z\"},\"name\":{\"first_name\":\"John\",\"last_name\":\"Doe\"},\"fruits\":[\"Orange\",\"Banana\"]}\n```","summary":"<p><strong>BSON is a binary format in which zero or more ordered key/value pairs are stored as a single entity.</strong></p>","class_methods":[{"id":"from_json(json:String)-class-method","html_id":"from_json(json:String)-class-method","name":"from_json","doc":"Allocate a BSON instance from a relaxed extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst\n\n```\nbson = BSON.from_json(%({\n  \"_id\": {\n    \"$oid\": \"57e193d7a9cc81b4027498b5\"\n  },\n  \"String\": \"string\",\n  \"Int\": 42,\n  \"Double\": -1.0\n}))\nputs bson.to_json # => {\"_id\":{\"$oid\":\"57e193d7a9cc81b4027498b5\"},\"String\":\"string\",\"Int\":42,\"Double\":-1.0}\n```","summary":"<p>Allocate a BSON instance from a relaxed extended json representation.</p>","abstract":false,"args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"String"}],"args_string":"(json : String)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L375","def":{"name":"from_json","args":[{"name":"json","doc":null,"default_value":"","external_name":"json","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.new(JSON::PullParser.new(json))"}}],"constructors":[{"id":"new(data:Bytes?=nil,validate?=false)-class-method","html_id":"new(data:Bytes?=nil,validate?=false)-class-method","name":"new","doc":"Allocate a BSON instance from a byte array.\n\nNOTE: The byte array is cloned.\n\n```\ndata = \"160000000378000E0000000261000200000062000000\"\nbson = BSON.new(data)\nbson.to_json # => {\"x\":{\"a\":\"b\"}}\n```","summary":"<p>Allocate a BSON instance from a byte array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"nil","external_name":"data","restriction":"Bytes | ::Nil"},{"name":"validate?","doc":null,"default_value":"false","external_name":"validate?","restriction":""}],"args_string":"(data : Bytes? = <span class=\"n\">nil</span>, validate? = <span class=\"n\">false</span>)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L100","def":{"name":"new","args":[{"name":"data","doc":null,"default_value":"nil","external_name":"data","restriction":"Bytes | ::Nil"},{"name":"validate?","doc":null,"default_value":"false","external_name":"validate?","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(data, validate?)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(tuple:NamedTuple)-class-method","html_id":"new(tuple:NamedTuple)-class-method","name":"new","doc":"Allocate a BSON instance from a NamedTuple.\n\n```\nputs BSON.new({\n  hello: \"world\"\n}).to_json # => {\"hello\":\"world\"}\n```","summary":"<p>Allocate a BSON instance from a NamedTuple.</p>","abstract":false,"args":[{"name":"tuple","doc":null,"default_value":"","external_name":"tuple","restriction":"NamedTuple"}],"args_string":"(tuple : NamedTuple)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L117","def":{"name":"new","args":[{"name":"tuple","doc":null,"default_value":"","external_name":"tuple","restriction":"NamedTuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(tuple)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(h:Hash)-class-method","html_id":"new(h:Hash)-class-method","name":"new","doc":"Allocate a BSON instance from a Hash.\n\n```\nputs BSON.new({\n  \"hello\" => \"world\"\n}).to_json # => {\"hello\":\"world\"}\n```","summary":"<p>Allocate a BSON instance from a Hash.</p>","abstract":false,"args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"Hash"}],"args_string":"(h : Hash)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L132","def":{"name":"new","args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":"Hash"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(h)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"(other:BSON)-instance-method","html_id":"(other:BSON)-instance-method","name":"<=>","doc":"Compare with another BSON value.\n\n```\nputs BSON.new({ a: 1 }) <=> BSON.new({ a: 1 }) # => 0\nputs BSON.new({ a: 1 }) <=> BSON.new({ b: 2 }) # => -1\n```","summary":"<p>Compare with another BSON value.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"BSON"}],"args_string":"(other : BSON)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L264","def":{"name":"<=>","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.data <=> other.data"}},{"id":"[](key:String|::Symbol):Value-instance-method","html_id":"[](key:String|::Symbol):Value-instance-method","name":"[]","doc":"Return the element with the given key.\n\nNOTE: Will raise if the key is not found.\n\n```\nbson = BSON.new({ key: \"value\" })\nputs bson[\"key\"]? # =>\"value\"\nputs bson[\"nope\"]? # => nil","summary":"<p>Return the element with the given key.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | ::Symbol"}],"args_string":"(key : String | ::Symbol) : Value","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L253","def":{"name":"[]","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | ::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Value","visibility":"Public","body":"if value = self[key]?\nelse\n  raise(\"Missing bson key: #{key}\")\nend\nvalue\n"}},{"id":"[]=(key:String|::Symbol,value)-instance-method","html_id":"[]=(key:String|::Symbol,value)-instance-method","name":"[]=","doc":"Append a key/value pair.\n\n```\nbson = BSON.new\nbson[\"key\"] = \"value\"\nputs bson.to_json # => {\"key\":\"value\"}\n```","summary":"<p>Append a key/value pair.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | ::Symbol"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(key : String | ::Symbol, value)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L167","def":{"name":"[]=","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | ::Symbol"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io = IO::Memory.new\nio.write(@data[4...-1])\nbuilder = Builder.new(io)\nbuilder[\"#{key}\"] = value\n@data = builder.to_bson\n"}},{"id":"[]?(key:String|::Symbol):Value?-instance-method","html_id":"[]?(key:String|::Symbol):Value?-instance-method","name":"[]?","doc":"Return the element with the given key, or `nil` if the key is not present.\n\n```\nbson = BSON.new({ key: \"value\" })\nputs bson[\"key\"]? # =>\"value\"\nputs bson[\"nope\"]? # => nil\n```","summary":"<p>Return the element with the given key, or <code>nil</code> if the key is not present.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | ::Symbol"}],"args_string":"(key : String | ::Symbol) : Value?","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L221","def":{"name":"[]?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | ::Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Value | ::Nil","visibility":"Public","body":"pointer = @data.to_unsafe\nsize = (pointer.as(Pointer(Int32))).value\npos = 4\nloop do\n  if (pointer + pos).value == 0\n    break\n  end\n  code = Element.new((pointer + pos).value)\n  pos = pos + 1\n  field = String.new(pointer + pos)\n  pos = pos + (field.bytesize + 1)\n  if field == key\n    _, data = Decoder.decode_field!(pointer, pos, {code, field}, max_pos: size)\n    return data[1]\n  else\n    pos = Decoder.skip_field(code, pointer, pos, max_pos: size)\n  end\nend\n"}},{"id":"append(other:BSON)-instance-method","html_id":"append(other:BSON)-instance-method","name":"append","doc":"Append the contents of another BSON instance.\n\n```\nbson = BSON.new\nother_bson = BSON.new({ key: \"value\", key2: \"value2\" })\nbson.append(other_bson)\nputs bson.to_json # => {\"key\":\"value\",\"key2\":\"value2\"}\n```","summary":"<p>Append the contents of another BSON instance.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"BSON"}],"args_string":"(other : BSON)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L203","def":{"name":"append","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"BSON"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"size = (@data.to_unsafe.as(Pointer(Int32))).value\nio = IO::Memory.new(size)\nio.write(@data[4...-1])\nbuilder = Builder.new(io)\nother.each do |key, value|\n  builder[\"#{key}\"] = value\nend\n@data = builder.to_bson\n"}},{"id":"append(**args)-instance-method","html_id":"append(**args)-instance-method","name":"append","doc":"Append one or more key/value pairs.\n\nNOTE: more efficient for appending multiple values than calling `[]=` individually.\n\n```\nbson = BSON.new\nbson.append(key: \"value\", key2: \"value2\")\nputs bson.to_json # => {\"key\":\"value\",\"key2\":\"value2\"}\n```","summary":"<p>Append one or more key/value pairs.</p>","abstract":false,"args":[],"args_string":"(**args)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L184","def":{"name":"append","args":[],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"size = (@data.to_unsafe.as(Pointer(Int32))).value\nio = IO::Memory.new(size)\nio.write(@data[4...-1])\nbuilder = Builder.new(io)\nargs.each do |key, value|\n  builder[\"#{key}\"] = value\nend\n@data = builder.to_bson\n"}},{"id":"data:Slice(UInt8)-instance-method","html_id":"data:Slice(UInt8)-instance-method","name":"data","doc":"Underlying bytes","summary":"<p>Underlying bytes</p>","abstract":false,"args":[],"args_string":" : Slice(UInt8)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L39","def":{"name":"data","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@data"}},{"id":"each(&block:::Tuple(String,Value,Element,Binary::SubType?)->_)-instance-method","html_id":"each(&amp;block:::Tuple(String,Value,Element,Binary::SubType?)-&gt;_)-instance-method","name":"each","doc":"Yield each key/value pair to the block.\n\nNOTE: Underlying BSON code as well as the binary subtype are also yielded to the block as additional arguments.\n\n```\nBSON.new({\n  a: 1,\n  b: \"2\",\n  c: Slice[0_u8, 1_u8, 2_u8]\n}).each { |(key, value, code, binary_subtype)|\n  puts \"#{key} => #{value}, code: #{code}, subtype: #{binary_subtype}\"\n  # a => 1, code: Int32, subtype:\n  # b => 2, code: String, subtype:\n  # c => Bytes[0, 1, 2], code: Binary, subtype: Generic\n}\n```","summary":"<p>Yield each key/value pair to the block.</p>","abstract":false,"args":[],"args_string":"(&block : ::Tuple(String, Value, Element, Binary::SubType?) -> _)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L284","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(::Tuple(String, Value, Element, Binary::SubType | ::Nil) -> _)"},"return_type":"","visibility":"Public","body":"pointer = @data.to_unsafe\nsize = (pointer.as(Pointer(Int32))).value\npos = 4\nloop do\n  if (pointer + pos).value == 0\n    if pos != (size - 1)\n      raise(\"Invalid BSON size.\")\n    end\n    break\n  end\n  if pos >= size\n    raise(\"Invalid BSON size.\")\n  end\n  new_pos, data = Decoder.decode_field!(pointer, pos, max_pos: size)\n  pos = new_pos\n  yield data\nend\n"}},{"id":"each-instance-method","html_id":"each-instance-method","name":"each","doc":"Returns an Iterator over each key/value pair.","summary":"<p>Returns an Iterator over each key/value pair.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L304","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Iterator.new(self)"}},{"id":"to_canonical_extjson-instance-method","html_id":"to_canonical_extjson-instance-method","name":"to_canonical_extjson","doc":"Serialize this BSON instance into a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst\n```\nbson = BSON.from_json(%({\n  \"Int\": 42,\n  \"Double\": -1.0\n}))\nputs bson.to_canonical_extjson # => {\"Int\":{\"$numberLong\":\"42\"},\"Double\":{\"$numberDouble\":\"-1.0\"}}\n```","summary":"<p>Serialize this BSON instance into a canonical extended json representation.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L448","def":{"name":"to_canonical_extjson","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io = IO::Memory.new\nbuilder = JSON::Builder.new(io)\nbuilder.start_document\nself.to_canonical_extjson(builder)\nbuilder.end_document\nio.to_s\n"}},{"id":"to_h-instance-method","html_id":"to_h-instance-method","name":"to_h","doc":"Returns a Hash representation.\n\n```\nbson = BSON.new({\n  a: 1,\n  b: \"2\"\n})\npp bson.to_h # => {\"a\" => 1, \"b\" => \"2\"}\n```","summary":"<p>Returns a Hash representation.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L339","def":{"name":"to_h","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hash = Hash(String, Value).new\nself.each do |__arg0|\n  key = __arg0[0]\n  value = __arg0[1]\n  hash[key] = value\nend\nhash\n"}},{"id":"validate!-instance-method","html_id":"validate!-instance-method","name":"validate!","doc":"Validate that the BSON is well-formed.\n\n```\nbson = BSON.new(\"140000000461000D0000001030000A0000000000\".hexbytes)\nbson.validate!\n# => Unhandled exception: Invalid BSON (overflow) (Exception)\n```","summary":"<p>Validate that the BSON is well-formed.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L354","def":{"name":"validate!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.each do |__arg1|\n  k = __arg1[0]\n  v = __arg1[1]\n  {k, v}\nend"}}],"macros":[],"types":[{"html_id":"github.com/elbywan/bson.cr/BSON/Binary","path":"BSON/Binary.html","kind":"struct","full_name":"BSON::Binary","name":"Binary","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/binary.cr","line_number":5,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/binary.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/elbywan/bson.cr/BSON","kind":"struct","full_name":"BSON","name":"BSON"},"doc":"Binary data.","summary":"<p>Binary data.</p>","class_methods":[],"constructors":[{"id":"new(subtype:SubType,data:Bytes)-class-method","html_id":"new(subtype:SubType,data:Bytes)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"subtype","doc":null,"default_value":"","external_name":"subtype","restriction":"SubType"},{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Bytes"}],"args_string":"(subtype : SubType, data : Bytes)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/binary.cr#L21","def":{"name":"new","args":[{"name":"subtype","doc":null,"default_value":"","external_name":"subtype","restriction":"SubType"},{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(subtype, data)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(uuid:UUID)-class-method","html_id":"new(uuid:UUID)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"uuid","doc":null,"default_value":"","external_name":"uuid","restriction":"UUID"}],"args_string":"(uuid : UUID)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/binary.cr#L25","def":{"name":"new","args":[{"name":"uuid","doc":null,"default_value":"","external_name":"uuid","restriction":"UUID"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(uuid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"data:Slice(UInt8)-instance-method","html_id":"data:Slice(UInt8)-instance-method","name":"data","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Slice(UInt8)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/binary.cr#L19","def":{"name":"data","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@data"}},{"id":"subtype:BSON::Binary::SubType-instance-method","html_id":"subtype:BSON::Binary::SubType-instance-method","name":"subtype","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::Binary::SubType","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/binary.cr#L19","def":{"name":"subtype","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@subtype"}}],"macros":[],"types":[{"html_id":"github.com/elbywan/bson.cr/BSON/Binary/SubType","path":"BSON/Binary/SubType.html","kind":"enum","full_name":"BSON::Binary::SubType","name":"SubType","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/binary.cr","line_number":8,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/binary.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Generic","name":"Generic","value":"0_u8","doc":null,"summary":null},{"id":"Function","name":"Function","value":"1_u8","doc":null,"summary":null},{"id":"Binary_Old","name":"Binary_Old","value":"2_u8","doc":null,"summary":null},{"id":"UUID_Old","name":"UUID_Old","value":"3_u8","doc":null,"summary":null},{"id":"UUID","name":"UUID","value":"4_u8","doc":null,"summary":null},{"id":"MD5","name":"MD5","value":"5_u8","doc":null,"summary":null},{"id":"EncryptedBSON","name":"EncryptedBSON","value":"6_u8","doc":null,"summary":null},{"id":"UserDefined","name":"UserDefined","value":"128_u8","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/elbywan/bson.cr/BSON/Binary","kind":"struct","full_name":"BSON::Binary","name":"Binary"},"doc":"BSON binary values have a subtype. This is used to indicate what kind of data is in the byte array.\nSubtypes from zero to 127 are predefined or reserved. Subtypes from 128-255 are user-defined.","summary":"<p>BSON binary values have a subtype.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"binary_old?-instance-method","html_id":"binary_old?-instance-method","name":"binary_old?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/binary.cr#L11","def":{"name":"binary_old?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Binary_Old"}},{"id":"encrypted_bson?-instance-method","html_id":"encrypted_bson?-instance-method","name":"encrypted_bson?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/binary.cr#L15","def":{"name":"encrypted_bson?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == EncryptedBSON"}},{"id":"function?-instance-method","html_id":"function?-instance-method","name":"function?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/binary.cr#L10","def":{"name":"function?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Function"}},{"id":"generic?-instance-method","html_id":"generic?-instance-method","name":"generic?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/binary.cr#L9","def":{"name":"generic?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Generic"}},{"id":"md5?-instance-method","html_id":"md5?-instance-method","name":"md5?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/binary.cr#L14","def":{"name":"md5?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == MD5"}},{"id":"user_defined?-instance-method","html_id":"user_defined?-instance-method","name":"user_defined?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/binary.cr#L16","def":{"name":"user_defined?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == UserDefined"}},{"id":"uuid?-instance-method","html_id":"uuid?-instance-method","name":"uuid?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/binary.cr#L13","def":{"name":"uuid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == UUID"}},{"id":"uuid_old?-instance-method","html_id":"uuid_old?-instance-method","name":"uuid_old?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/binary.cr#L12","def":{"name":"uuid_old?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == UUID_Old"}}],"macros":[],"types":[]}]},{"html_id":"github.com/elbywan/bson.cr/BSON/Code","path":"BSON/Code.html","kind":"struct","full_name":"BSON::Code","name":"Code","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/code.cr","line_number":3,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/code.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/elbywan/bson.cr/BSON","kind":"struct","full_name":"BSON","name":"BSON"},"doc":"JavaScript code.","summary":"<p>JavaScript code.</p>","class_methods":[],"constructors":[{"id":"new(code:String,scope:BSON?=nil)-class-method","html_id":"new(code:String,scope:BSON?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":"String"},{"name":"scope","doc":null,"default_value":"nil","external_name":"scope","restriction":"BSON | ::Nil"}],"args_string":"(code : String, scope : BSON? = <span class=\"n\">nil</span>)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/code.cr#L6","def":{"name":"new","args":[{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":"String"},{"name":"scope","doc":null,"default_value":"nil","external_name":"scope","restriction":"BSON | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(code, scope)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"code:String-instance-method","html_id":"code:String-instance-method","name":"code","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/code.cr#L4","def":{"name":"code","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@code"}},{"id":"scope:BSON?-instance-method","html_id":"scope:BSON?-instance-method","name":"scope","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON?","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/code.cr#L4","def":{"name":"scope","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@scope"}},{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/code.cr#L15","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.object do\n  builder.string(\"$code\")\n  builder.scalar(@code)\n  if scope = @scope\n    builder.string(\"$scope\")\n    scope.to_canonical_extjson(builder)\n  end\nend"}},{"id":"to_json(builder:JSON::Builder)-instance-method","html_id":"to_json(builder:JSON::Builder)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/code.cr#L8","def":{"name":"to_json","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_canonical_extjson(builder)"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/BSON/DBPointer","path":"BSON/DBPointer.html","kind":"struct","full_name":"BSON::DBPointer","name":"DBPointer","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/dbpointer.cr","line_number":3,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/dbpointer.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/elbywan/bson.cr/BSON","kind":"struct","full_name":"BSON","name":"BSON"},"doc":"DBPointer — Deprecated.","summary":"<p>DBPointer — Deprecated.</p>","class_methods":[],"constructors":[{"id":"new(data:String,oid:ObjectId)-class-method","html_id":"new(data:String,oid:ObjectId)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"String"},{"name":"oid","doc":null,"default_value":"","external_name":"oid","restriction":"ObjectId"}],"args_string":"(data : String, oid : ObjectId)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/dbpointer.cr#L6","def":{"name":"new","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"String"},{"name":"oid","doc":null,"default_value":"","external_name":"oid","restriction":"ObjectId"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(data, oid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"data:String-instance-method","html_id":"data:String-instance-method","name":"data","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/dbpointer.cr#L4","def":{"name":"data","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@data"}},{"id":"oid:BSON::ObjectId-instance-method","html_id":"oid:BSON::ObjectId-instance-method","name":"oid","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BSON::ObjectId","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/dbpointer.cr#L4","def":{"name":"oid","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@oid"}},{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/dbpointer.cr#L16","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.object do\n  builder.string(\"$dbPointer\")\n  builder.object do\n    builder.string(\"$ref\")\n    builder.string(@data)\n    builder.string(\"$id\")\n    @oid.to_canonical_extjson(builder)\n  end\nend"}},{"id":"to_json(builder:JSON::Builder)-instance-method","html_id":"to_json(builder:JSON::Builder)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/dbpointer.cr#L9","def":{"name":"to_json","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_canonical_extjson(builder)"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/BSON/Decimal128","path":"BSON/Decimal128.html","kind":"struct","full_name":"BSON::Decimal128","name":"Decimal128","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/decimal128.cr","line_number":31,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"EXPONENT_OFFSET","name":"EXPONENT_OFFSET","value":"6176","doc":"Exponent offset.","summary":"<p>Exponent offset.</p>"},{"id":"INFINITY_MASK","name":"INFINITY_MASK","value":"8646911284551352320_i64.to_big_i","doc":"Infinity mask.","summary":"<p>Infinity mask.</p>"},{"id":"INFINITY_REGEX","name":"INFINITY_REGEX","value":"/^(\\+|\\-)?Inf(inity)?$/i","doc":"Regex matching a string representing positive or negative Infinity.","summary":"<p>Regex matching a string representing positive or negative Infinity.</p>"},{"id":"INFINITY_STRING","name":"INFINITY_STRING","value":"\"Infinity\"","doc":"String representing an Infinity value.","summary":"<p>String representing an Infinity value.</p>"},{"id":"MAX_DIGITS_OF_PRECISION","name":"MAX_DIGITS_OF_PRECISION","value":"34","doc":"Maximum digits of precision.","summary":"<p>Maximum digits of precision.</p>"},{"id":"MAX_EXPONENT","name":"MAX_EXPONENT","value":"6111","doc":"Maximum exponent.","summary":"<p>Maximum exponent.</p>"},{"id":"MIN_EXPONENT","name":"MIN_EXPONENT","value":"-6176","doc":"Minimum exponent.","summary":"<p>Minimum exponent.</p>"},{"id":"NAN_MASK","name":"NAN_MASK","value":"8935141660703064064_i64.to_big_i","doc":"NaN mask.","summary":"<p>NaN mask.</p>"},{"id":"NAN_REGEX","name":"NAN_REGEX","value":"/^(\\-)?(S)?NaN$/i","doc":"Regex matching a string representing NaN.","summary":"<p>Regex matching a string representing NaN.</p>"},{"id":"NAN_STRING","name":"NAN_STRING","value":"\"NaN\"","doc":"String representing a NaN value.","summary":"<p>String representing a NaN value.</p>"},{"id":"SCIENTIFIC_EXPONENT_REGEX","name":"SCIENTIFIC_EXPONENT_REGEX","value":"/E\\+?/i","doc":"Regex matching a scientific exponent.","summary":"<p>Regex matching a scientific exponent.</p>"},{"id":"SIGN_AND_DIGITS_REGEX","name":"SIGN_AND_DIGITS_REGEX","value":"/^(\\-)?(\\S+)/","doc":"Regex for separating a negative sign from the significands.","summary":"<p>Regex for separating a negative sign from the significands.</p>"},{"id":"SIGN_BIT_MASK","name":"SIGN_BIT_MASK","value":"(1.to_big_i << 63)","doc":"Signed bit mask.","summary":"<p>Signed bit mask.</p>"},{"id":"SIGNIFICAND_WITH_LEADING_ZEROS_REGEX","name":"SIGNIFICAND_WITH_LEADING_ZEROS_REGEX","value":"/(0*)(\\d+)/","doc":"Regex for the fraction, including leading zeros.","summary":"<p>Regex for the fraction, including leading zeros.</p>"},{"id":"SNAN_MASK","name":"SNAN_MASK","value":"(1.to_big_i << 57)","doc":"SNaN mask.","summary":"<p>SNaN mask.</p>"},{"id":"TRAILING_ZEROS_REGEX","name":"TRAILING_ZEROS_REGEX","value":"/[1-9]*(0+)$/","doc":"Regex for capturing trailing zeros.","summary":"<p>Regex for capturing trailing zeros.</p>"},{"id":"TWO_HIGHEST_BITS_SET","name":"TWO_HIGHEST_BITS_SET","value":"(3.to_big_i << 61)","doc":"The two highest bits of the 64 high order bits.","summary":"<p>The two highest bits of the 64 high order bits.</p>"},{"id":"VALID_DECIMAL128_STRING_REGEX","name":"VALID_DECIMAL128_STRING_REGEX","value":"/^[\\-\\+]?(\\d+(\\.\\d*)?|\\.\\d+)(E[\\-\\+]?\\d+)?$/i","doc":"Regex for a valid decimal128 string format.","summary":"<p>Regex for a valid decimal128 string format.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/elbywan/bson.cr/BSON","kind":"struct","full_name":"BSON","name":"BSON"},"doc":"128-bit decimal floating point.\n\nNOTE: This implementation has been mostly ported from https://github.com/mongodb/bson-ruby/blob/master/lib/bson/decimal128.rb.\n\n**Performance is bad because it relies on a string representation of the value.**\n\nSee: https://github.com/mongodb/specifications/blob/master/source/bson-decimal128/decimal128.rst","summary":"<p>128-bit decimal floating point.</p>","class_methods":[],"constructors":[{"id":"new(significand:BigInt,exponent:Int32,is_negative:Bool)-class-method","html_id":"new(significand:BigInt,exponent:Int32,is_negative:Bool)-class-method","name":"new","doc":"Convert parts representing a Decimal128 into the corresponding bits.","summary":"<p>Convert parts representing a Decimal128 into the corresponding bits.</p>","abstract":false,"args":[{"name":"significand","doc":null,"default_value":"","external_name":"significand","restriction":"BigInt"},{"name":"exponent","doc":null,"default_value":"","external_name":"exponent","restriction":"Int32"},{"name":"is_negative","doc":null,"default_value":"","external_name":"is_negative","restriction":"Bool"}],"args_string":"(significand : BigInt, exponent : Int32, is_negative : Bool)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr#L75","def":{"name":"new","args":[{"name":"significand","doc":null,"default_value":"","external_name":"significand","restriction":"BigInt"},{"name":"exponent","doc":null,"default_value":"","external_name":"exponent","restriction":"Int32"},{"name":"is_negative","doc":null,"default_value":"","external_name":"is_negative","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(significand, exponent, is_negative)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(string:String)-class-method","html_id":"new(string:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"args_string":"(string : String)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr#L79","def":{"name":"new","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(string)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(big_decimal:BigDecimal)-class-method","html_id":"new(big_decimal:BigDecimal)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"big_decimal","doc":null,"default_value":"","external_name":"big_decimal","restriction":"BigDecimal"}],"args_string":"(big_decimal : BigDecimal)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr#L114","def":{"name":"new","args":[{"name":"big_decimal","doc":null,"default_value":"","external_name":"big_decimal","restriction":"BigDecimal"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(big_decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(bytes:Bytes)-class-method","html_id":"new(bytes:Bytes)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"bytes","doc":null,"default_value":"","external_name":"bytes","restriction":"Bytes"}],"args_string":"(bytes : Bytes)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr#L118","def":{"name":"new","args":[{"name":"bytes","doc":null,"default_value":"","external_name":"bytes","restriction":"Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bytes)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"bytes-instance-method","html_id":"bytes-instance-method","name":"bytes","doc":"BSON byte representation.","summary":"<p>BSON byte representation.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr#L161","def":{"name":"bytes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"low = Bytes.new(8)\nlow.copy_from(@low.bytes)\nhigh = Bytes.new(8)\nhigh.copy_from(@high.bytes)\nio = IO::Memory.new\nio.write(low)\nio.write(high)\nio.to_slice\n"}},{"id":"high:BigInt-instance-method","html_id":"high:BigInt-instance-method","name":"high","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BigInt","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr#L33","def":{"name":"high","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BigInt","visibility":"Public","body":"@high"}},{"id":"infinity?-instance-method","html_id":"infinity?-instance-method","name":"infinity?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr#L131","def":{"name":"infinity?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(@high & INFINITY_MASK) == INFINITY_MASK"}},{"id":"low:BigInt-instance-method","html_id":"low:BigInt-instance-method","name":"low","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BigInt","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr#L33","def":{"name":"low","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BigInt","visibility":"Public","body":"@low"}},{"id":"nan?-instance-method","html_id":"nan?-instance-method","name":"nan?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr#L123","def":{"name":"nan?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(@high & NAN_MASK) == NAN_MASK"}},{"id":"negative?-instance-method","html_id":"negative?-instance-method","name":"negative?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr#L127","def":{"name":"negative?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(@high & SIGN_BIT_MASK) == SIGN_BIT_MASK"}},{"id":"to_big_d-instance-method","html_id":"to_big_d-instance-method","name":"to_big_d","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr#L142","def":{"name":"to_big_d","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"BigDecimal.new(self.to_s)"}},{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr#L153","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.object do\n  builder.string(\"$numberDecimal\")\n  builder.scalar(self.to_s)\nend"}},{"id":"to_json(builder:JSON::Builder)-instance-method","html_id":"to_json(builder:JSON::Builder)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr#L146","def":{"name":"to_json","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_canonical_extjson(builder)"}},{"id":"to_s(io:IO)-instance-method","html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Same as `#inspect(io)`.","summary":"<p>Same as <code>#inspect(io)</code>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr#L135","def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if nan?\n  return io << NAN_STRING\nend\nstr = infinity? ? INFINITY_STRING : create_string\nstr = negative? ? '-' + str : str\nio << str\n"}}],"macros":[],"types":[{"html_id":"github.com/elbywan/bson.cr/BSON/Decimal128/InvalidRange","path":"BSON/Decimal128/InvalidRange.html","kind":"class","full_name":"BSON::Decimal128::InvalidRange","name":"InvalidRange","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/elbywan/bson.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/decimal128.cr","line_number":175,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/elbywan/bson.cr/BSON/Decimal128","kind":"struct","full_name":"BSON::Decimal128","name":"Decimal128"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/BSON/Decimal128/InvalidString","path":"BSON/Decimal128/InvalidString.html","kind":"class","full_name":"BSON::Decimal128::InvalidString","name":"InvalidString","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/elbywan/bson.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/decimal128.cr","line_number":173,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/decimal128.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/elbywan/bson.cr/BSON/Decimal128","kind":"struct","full_name":"BSON::Decimal128","name":"Decimal128"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/elbywan/bson.cr/BSON/Element","path":"BSON/Element.html","kind":"enum","full_name":"BSON::Element","name":"Element","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson.cr","line_number":67,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Double","name":"Double","value":"1_u8","doc":null,"summary":null},{"id":"String","name":"String","value":"2_u8","doc":null,"summary":null},{"id":"Document","name":"Document","value":"3_u8","doc":null,"summary":null},{"id":"Array","name":"Array","value":"4_u8","doc":null,"summary":null},{"id":"Binary","name":"Binary","value":"5_u8","doc":null,"summary":null},{"id":"Undefined","name":"Undefined","value":"6_u8","doc":null,"summary":null},{"id":"ObjectId","name":"ObjectId","value":"7_u8","doc":null,"summary":null},{"id":"Boolean","name":"Boolean","value":"8_u8","doc":null,"summary":null},{"id":"DateTime","name":"DateTime","value":"9_u8","doc":null,"summary":null},{"id":"Null","name":"Null","value":"10_u8","doc":null,"summary":null},{"id":"Regexp","name":"Regexp","value":"11_u8","doc":null,"summary":null},{"id":"DBPointer","name":"DBPointer","value":"12_u8","doc":null,"summary":null},{"id":"JSCode","name":"JSCode","value":"13_u8","doc":null,"summary":null},{"id":"Symbol","name":"Symbol","value":"14_u8","doc":null,"summary":null},{"id":"JSCodeWithScope","name":"JSCodeWithScope","value":"15_u8","doc":null,"summary":null},{"id":"Int32","name":"Int32","value":"16_u8","doc":null,"summary":null},{"id":"Timestamp","name":"Timestamp","value":"17_u8","doc":null,"summary":null},{"id":"Int64","name":"Int64","value":"18_u8","doc":null,"summary":null},{"id":"Decimal128","name":"Decimal128","value":"19_u8","doc":null,"summary":null},{"id":"MinKey","name":"MinKey","value":"255_u8","doc":null,"summary":null},{"id":"MaxKey","name":"MaxKey","value":"127_u8","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/elbywan/bson.cr/BSON","kind":"struct","full_name":"BSON","name":"BSON"},"doc":"List of BSON elements","summary":"<p>List of BSON elements</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"array?-instance-method","html_id":"array?-instance-method","name":"array?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L71","def":{"name":"array?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Array"}},{"id":"binary?-instance-method","html_id":"binary?-instance-method","name":"binary?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L72","def":{"name":"binary?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Binary"}},{"id":"boolean?-instance-method","html_id":"boolean?-instance-method","name":"boolean?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L75","def":{"name":"boolean?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Boolean"}},{"id":"date_time?-instance-method","html_id":"date_time?-instance-method","name":"date_time?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L76","def":{"name":"date_time?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == DateTime"}},{"id":"db_pointer?-instance-method","html_id":"db_pointer?-instance-method","name":"db_pointer?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L79","def":{"name":"db_pointer?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == DBPointer"}},{"id":"decimal128?-instance-method","html_id":"decimal128?-instance-method","name":"decimal128?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L86","def":{"name":"decimal128?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Decimal128"}},{"id":"document?-instance-method","html_id":"document?-instance-method","name":"document?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L70","def":{"name":"document?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Document"}},{"id":"double?-instance-method","html_id":"double?-instance-method","name":"double?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L68","def":{"name":"double?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Double"}},{"id":"int32?-instance-method","html_id":"int32?-instance-method","name":"int32?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L83","def":{"name":"int32?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Int32"}},{"id":"int64?-instance-method","html_id":"int64?-instance-method","name":"int64?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L85","def":{"name":"int64?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Int64"}},{"id":"js_code?-instance-method","html_id":"js_code?-instance-method","name":"js_code?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L80","def":{"name":"js_code?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == JSCode"}},{"id":"js_code_with_scope?-instance-method","html_id":"js_code_with_scope?-instance-method","name":"js_code_with_scope?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L82","def":{"name":"js_code_with_scope?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == JSCodeWithScope"}},{"id":"max_key?-instance-method","html_id":"max_key?-instance-method","name":"max_key?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L88","def":{"name":"max_key?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == MaxKey"}},{"id":"min_key?-instance-method","html_id":"min_key?-instance-method","name":"min_key?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L87","def":{"name":"min_key?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == MinKey"}},{"id":"null?-instance-method","html_id":"null?-instance-method","name":"null?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L77","def":{"name":"null?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Null"}},{"id":"object_id?-instance-method","html_id":"object_id?-instance-method","name":"object_id?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L74","def":{"name":"object_id?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ObjectId"}},{"id":"regexp?-instance-method","html_id":"regexp?-instance-method","name":"regexp?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L78","def":{"name":"regexp?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Regexp"}},{"id":"string?-instance-method","html_id":"string?-instance-method","name":"string?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L69","def":{"name":"string?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == String"}},{"id":"symbol?-instance-method","html_id":"symbol?-instance-method","name":"symbol?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L81","def":{"name":"symbol?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Symbol"}},{"id":"timestamp?-instance-method","html_id":"timestamp?-instance-method","name":"timestamp?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L84","def":{"name":"timestamp?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Timestamp"}},{"id":"undefined?-instance-method","html_id":"undefined?-instance-method","name":"undefined?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr#L73","def":{"name":"undefined?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Undefined"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/BSON/MaxKey","path":"BSON/MaxKey.html","kind":"struct","full_name":"BSON::MaxKey","name":"MaxKey","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/keys.cr","line_number":21,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/keys.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/elbywan/bson.cr/BSON","kind":"struct","full_name":"BSON","name":"BSON"},"doc":"Max key - Special type which compares higher than all other possible BSON element values.","summary":"<p>Max key - Special type which compares higher than all other possible BSON element values.</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/keys.cr#L21","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/keys.cr#L30","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.object do\n  builder.string(\"$maxKey\")\n  builder.scalar(1)\nend"}},{"id":"to_json(builder:JSON::Builder)-instance-method","html_id":"to_json(builder:JSON::Builder)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/keys.cr#L23","def":{"name":"to_json","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_canonical_extjson(builder)"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/BSON/MinKey","path":"BSON/MinKey.html","kind":"struct","full_name":"BSON::MinKey","name":"MinKey","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/keys.cr","line_number":3,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/keys.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/elbywan/bson.cr/BSON","kind":"struct","full_name":"BSON","name":"BSON"},"doc":"Min key - Special type which compares lower than all other possible BSON element values.","summary":"<p>Min key - Special type which compares lower than all other possible BSON element values.</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/keys.cr#L3","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/keys.cr#L12","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.object do\n  builder.string(\"$minKey\")\n  builder.scalar(1)\nend"}},{"id":"to_json(builder:JSON::Builder)-instance-method","html_id":"to_json(builder:JSON::Builder)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/keys.cr#L5","def":{"name":"to_json","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_canonical_extjson(builder)"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/BSON/ObjectId","path":"BSON/ObjectId.html","kind":"struct","full_name":"BSON::ObjectId","name":"ObjectId","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/object_id.cr","line_number":5,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/object_id.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/elbywan/bson.cr/BSON","kind":"struct","full_name":"BSON","name":"BSON"},"doc":"Unique object identifier.\n\nSee: dochub.mongodb.org/core/objectids","summary":"<p>Unique object identifier.</p>","class_methods":[],"constructors":[{"id":"new(str:String)-class-method","html_id":"new(str:String)-class-method","name":"new","doc":"Initialize from a hex string representation.","summary":"<p>Initialize from a hex string representation.</p>","abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"args_string":"(str : String)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/object_id.cr#L13","def":{"name":"new","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(str)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(data:Bytes)-class-method","html_id":"new(data:Bytes)-class-method","name":"new","doc":"Initialize from a Byte array.","summary":"<p>Initialize from a Byte array.</p>","abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Bytes"}],"args_string":"(data : Bytes)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/object_id.cr#L18","def":{"name":"new","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(data)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Create a random ObjectId.","summary":"<p>Create a random ObjectId.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/object_id.cr#L21","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"data:Bytes-instance-method","html_id":"data:Bytes-instance-method","name":"data","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bytes","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/object_id.cr#L7","def":{"name":"data","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"@data"}},{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/object_id.cr#L44","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.object do\n  builder.string(\"$oid\")\n  builder.scalar(@data.hexstring)\nend"}},{"id":"to_json(builder:JSON::Builder)-instance-method","html_id":"to_json(builder:JSON::Builder)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/object_id.cr#L37","def":{"name":"to_json","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_canonical_extjson(builder)"}},{"id":"to_s(io:IO):Nil-instance-method","html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Return a string hex representation of the ObjectId.","summary":"<p>Return a string hex representation of the ObjectId.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/object_id.cr#L33","def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"io << @data.hexstring"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/BSON/Symbol","path":"BSON/Symbol.html","kind":"struct","full_name":"BSON::Symbol","name":"Symbol","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/symbol.cr","line_number":3,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/symbol.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/elbywan/bson.cr/BSON","kind":"struct","full_name":"BSON","name":"BSON"},"doc":"Symbol. Deprecated.","summary":"<p>Symbol.</p>","class_methods":[],"constructors":[{"id":"new(data:String)-class-method","html_id":"new(data:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"String"}],"args_string":"(data : String)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/symbol.cr#L6","def":{"name":"new","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(data)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"data:String-instance-method","html_id":"data:String-instance-method","name":"data","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/symbol.cr#L4","def":{"name":"data","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@data"}},{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/symbol.cr#L16","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.object do\n  builder.string(\"$symbol\")\n  builder.scalar(@data)\nend"}},{"id":"to_json(builder:JSON::Builder)-instance-method","html_id":"to_json(builder:JSON::Builder)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/symbol.cr#L9","def":{"name":"to_json","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_canonical_extjson(builder)"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/BSON/Timestamp","path":"BSON/Timestamp.html","kind":"struct","full_name":"BSON::Timestamp","name":"Timestamp","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/timestamp.cr","line_number":4,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/timestamp.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/elbywan/bson.cr/BSON","kind":"struct","full_name":"BSON","name":"BSON"},"doc":"Timestamp - Special internal type used by MongoDB replication and sharding. First 4 bytes are an increment, second 4 are a timestamp.","summary":"<p>Timestamp - Special internal type used by MongoDB replication and sharding.</p>","class_methods":[],"constructors":[{"id":"new(t:UInt32,i:UInt32)-class-method","html_id":"new(t:UInt32,i:UInt32)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"UInt32"},{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"UInt32"}],"args_string":"(t : UInt32, i : UInt32)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/timestamp.cr#L7","def":{"name":"new","args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"UInt32"},{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"UInt32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(t, i)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"i:UInt32-instance-method","html_id":"i:UInt32-instance-method","name":"i","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt32","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/timestamp.cr#L5","def":{"name":"i","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@i"}},{"id":"t:UInt32-instance-method","html_id":"t:UInt32-instance-method","name":"t","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt32","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/timestamp.cr#L5","def":{"name":"t","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@t"}},{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/timestamp.cr#L17","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.object do\n  builder.string(\"$timestamp\")\n  builder.object do\n    builder.string(\"t\")\n    builder.scalar(@t)\n    builder.string(\"i\")\n    builder.scalar(@i)\n  end\nend"}},{"id":"to_json(builder:JSON::Builder)-instance-method","html_id":"to_json(builder:JSON::Builder)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/timestamp.cr#L10","def":{"name":"to_json","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_canonical_extjson(builder)"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/BSON/Undefined","path":"BSON/Undefined.html","kind":"struct","full_name":"BSON::Undefined","name":"Undefined","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/undefined.cr","line_number":3,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/undefined.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/elbywan/bson.cr/BSON","kind":"struct","full_name":"BSON","name":"BSON"},"doc":"Undefined (value) — Deprecated","summary":"<p>Undefined (value) — Deprecated</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/undefined.cr#L3","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/undefined.cr#L12","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.object do\n  builder.string(\"$undefined\")\n  builder.scalar(true)\nend"}},{"id":"to_json(builder:JSON::Builder)-instance-method","html_id":"to_json(builder:JSON::Builder)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/undefined.cr#L5","def":{"name":"to_json","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_canonical_extjson(builder)"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/BSON/Value","path":"BSON/Value.html","kind":"alias","full_name":"BSON::Value","name":"Value","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"bson.cr","line_number":42,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":true,"aliased":"(BSON | BSON::Code | BSON::DBPointer | BSON::Decimal128 | BSON::MaxKey | BSON::MinKey | BSON::ObjectId | BSON::Symbol | BSON::Timestamp | BSON::Undefined | Bool | Float64 | Int32 | Int64 | Regex | Slice(UInt8) | String | Time | UUID | Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/elbywan/bson.cr/BSON","kind":"struct","full_name":"BSON","name":"BSON"},"doc":"List of field values","summary":"<p>List of field values</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/elbywan/bson.cr/Float64","path":"Float64.html","kind":"struct","full_name":"Float64","name":"Float64","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Float","kind":"struct","full_name":"Float","name":"Float"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Float","kind":"struct","full_name":"Float","name":"Float"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/ext/float.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/float.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/float.cr#L5","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.object do\n  builder.string(\"$numberDouble\")\n  builder.scalar(to_s)\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/Int32","path":"Int32.html","kind":"struct","full_name":"Int32","name":"Int32","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Int","kind":"struct","full_name":"Int","name":"Int"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Int","kind":"struct","full_name":"Int","name":"Int"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/ext/int.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/int.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/int.cr#L5","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.object do\n  builder.string(\"$numberInt\")\n  builder.scalar(self.to_s)\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/Int64","path":"Int64.html","kind":"struct","full_name":"Int64","name":"Int64","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Int","kind":"struct","full_name":"Int","name":"Int"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Int","kind":"struct","full_name":"Int","name":"Int"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/ext/int.cr","line_number":13,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/int.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/int.cr#L17","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.object do\n  builder.string(\"$numberLong\")\n  builder.scalar(self.to_s)\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/Nil","path":"Nil.html","kind":"struct","full_name":"Nil","name":"Nil","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/ext/nil.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/nil.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"The `Nil` type has only one possible value: `nil`.\n\n`nil` is commonly used to represent the absence of a value.\nFor example, `String#index` returns the position of the character or `nil` if it's not\nin the string:\n\n```\nstr = \"Hello world\"\nstr.index 'e' # => 1\nstr.index 'a' # => nil\n```\n\nIn the above example, trying to invoke a method on the returned value will\ngive a compile time error unless both `Int32` and `Nil` define that method:\n\n```\nstr = \"Hello world\"\nidx = str.index 'e'\nidx + 1 # Error: undefined method '+' for Nil\n```\n\nThe language and the standard library provide short, readable, easy ways to deal with `nil`,\nsuch as `Object#try` and `Object#not_nil!`:\n\n```\nstr = \"Hello world\"\n\n# The index of 'e' in str or 0 if not found\nidx1 = str.index('e') || 0\n\nidx2 = str.index('a')\nif idx2\n  # Compiles: idx2 can't be nil here\n  idx2 + 1\nend\n\n# Tell the compiler that we are sure the returned\n# value is not nil: raises a runtime exception\n# if our assumption doesn't hold.\nidx3 = str.index('o').not_nil!\n```","summary":"<p>The <code><a href=\"Nil.html\">Nil</a></code> type has only one possible value: <code>nil</code>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/nil.cr#L5","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.scalar(self)"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/Regex","path":"Regex.html","kind":"class","full_name":"Regex","name":"Regex","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/ext/regex.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/regex.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `Regex` represents a regular expression, a pattern that describes the\ncontents of strings. A `Regex` can determine whether or not a string matches\nits description, and extract the parts of the string that match.\n\nA `Regex` can be created using the literal syntax, in which it is delimited by\nforward slashes (`/`):\n\n```\n/hay/ =~ \"haystack\"   # => 0\n/y/.match(\"haystack\") # => #<Regex::MatchData \"y\">\n```\n\nInterpolation works in regular expression literals just as it does in string\nliterals. Be aware that using this feature will cause an exception to be\nraised at runtime, if the resulting string would not be a valid regular\nexpression.\n\n```\nx = \"a\"\n/#{x}/.match(\"asdf\") # => #<Regex::MatchData \"a\">\nx = \"(\"\n/#{x}/ # raises ArgumentError\n```\n\nWhen we check to see if a particular regular expression describes a string,\nwe can say that we are performing a match or matching one against the other.\nIf we find that a regular expression does describe a string, we say that it\nmatches, and we can refer to a part of the string that was described as\na match.\n\nHere `\"haystack\"` does not contain the pattern `/needle/`, so it doesn't match:\n\n```\n/needle/.match(\"haystack\") # => nil\n```\n\nHere `\"haystack\"` contains the pattern `/hay/`, so it matches:\n\n```\n/hay/.match(\"haystack\") # => #<Regex::MatchData \"hay\">\n```\n\nRegex methods that perform a match usually return a truthy value if there was\na match and `nil` if there was no match. After performing a match, the\nspecial variable `$~` will be an instance of `Regex::MatchData` if it matched, `nil`\notherwise.\n\nWhen matching a regular expression using `=~` (either `String#=~` or\n`Regex#=~`), the returned value will be the index of the first match in the\nstring if the expression matched, `nil` otherwise.\n\n```\n/stack/ =~ \"haystack\"  # => 3\n\"haystack\" =~ /stack/  # => 3\n$~                     # => #<Regex::MatchData \"stack\">\n/needle/ =~ \"haystack\" # => nil\n\"haystack\" =~ /needle/ # => nil\n$~                     # raises Exception\n```\n\nWhen matching a regular expression using `#match` (either `String#match` or\n`Regex#match`), the returned value will be a `Regex::MatchData` if the expression\nmatched, `nil` otherwise.\n\n```\n/hay/.match(\"haystack\")    # => #<Regex::MatchData \"hay\">\n\"haystack\".match(/hay/)    # => #<Regex::MatchData \"hay\">\n$~                         # => #<Regex::MatchData \"hay\">\n/needle/.match(\"haystack\") # => nil\n\"haystack\".match(/needle/) # => nil\n$~                         # raises Exception\n```\n\n[Regular expressions](https://en.wikipedia.org/wiki/Regular_expression)\nhave their own language for describing strings.\n\nMany programming languages and tools implement their own regular expression\nlanguage, but Crystal uses [PCRE](http://www.pcre.org/), a popular C library\nfor providing regular expressions. Here give a brief summary of the most\nbasic features of regular expressions - grouping, repetition, and\nalternation - but the feature set of PCRE extends far beyond these, and we\ndon't attempt to describe it in full here. For more information, refer to\nthe PCRE documentation, especially the\n[full pattern syntax](http://www.pcre.org/original/doc/html/pcrepattern.html)\nor\n[syntax quick reference](http://www.pcre.org/original/doc/html/pcresyntax.html).\n\nThe regular expression language can be used to match much more than just the\nstatic substrings in the above examples. Certain characters, called\n[metacharacters](http://www.pcre.org/original/doc/html/pcrepattern.html#SEC4),\nare given special treatment in regular expressions, and can be used to\ndescribe more complex patterns. To match metacharacters literally in a\nregular expression, they must be escaped by being preceded with a backslash\n(`\\`). `escape` will do this automatically for a given String.\n\nA group of characters (often called a capture group or\n[subpattern](http://www.pcre.org/original/doc/html/pcrepattern.html#SEC14))\ncan be identified by enclosing it in parentheses (`()`). The contents of\neach capture group can be extracted on a successful match:\n\n```\n/a(sd)f/.match(\"_asdf_\")                     # => #<Regex::MatchData \"asdf\" 1:\"sd\">\n/a(sd)f/.match(\"_asdf_\").try &.[1]           # => \"sd\"\n/a(?<grp>sd)f/.match(\"_asdf_\")               # => #<Regex::MatchData \"asdf\" grp:\"sd\">\n/a(?<grp>sd)f/.match(\"_asdf_\").try &.[\"grp\"] # => \"sd\"\n```\n\nCapture groups are indexed starting from 1. Methods that accept a capture\ngroup index will usually also accept 0 to refer to the full match. Capture\ngroups can also be given names, using the `(?&lt;name&gt;...)` syntax, as in the\nprevious example.\n\nFollowing a match, the special variables $N (e.g., $1, $2, $3, ...) can be used\nto access a capture group. Trying to access an invalid capture group will raise an\nexception. Note that it is possible to have a successful match with a nil capture:\n\n```\n/(spice)(s)?/.match(\"spice\") # => #<Regex::MatchData \"spice\" 1:\"spice\" 2:nil>\n$1                           # => \"spice\"\n$2                           # => raises Exception\n```\n\nThis can be mitigated by using the nilable version of the above: $N?,\n(e.g., $1? $2?, $3?, ...). Changing the above to use `$2?` instead of `$2`\nwould return `nil`. `$2?.nil?` would return `true`.\n\nA character or group can be\n[repeated](http://www.pcre.org/original/doc/html/pcrepattern.html#SEC17)\nor made optional using an asterisk (`*` - zero or more), a plus sign\n(`+` - one or more), integer bounds in curly braces\n(`{n,m}`) (at least `n`, no more than `m`), or a question mark\n(`?`) (zero or one).\n\n```\n/fo*/.match(\"_f_\")         # => #<Regex::MatchData \"f\">\n/fo+/.match(\"_f_\")         # => nil\n/fo*/.match(\"_foo_\")       # => #<Regex::MatchData \"foo\">\n/fo{3,}/.match(\"_foo_\")    # => nil\n/fo{1,3}/.match(\"_foo_\")   # => #<Regex::MatchData \"foo\">\n/fo*/.match(\"_foo_\")       # => #<Regex::MatchData \"foo\">\n/fo*/.match(\"_foooooooo_\") # => #<Regex::MatchData \"foooooooo\">\n/fo{,3}/.match(\"_foooo_\")  # => nil\n/f(op)*/.match(\"fopopo\")   # => #<Regex::MatchData \"fopop\" 1: \"op\">\n/foo?bar/.match(\"foobar\")  # => #<Regex::MatchData \"foobar\">\n/foo?bar/.match(\"fobar\")   # => #<Regex::MatchData \"fobar\">\n```\n\nAlternatives can be separated using a\n[vertical bar](http://www.pcre.org/original/doc/html/pcrepattern.html#SEC12)\n(`|`). Any single character can be represented by\n[dot](http://www.pcre.org/original/doc/html/pcrepattern.html#SEC7)\n(`.`). When matching only one character, specific\nalternatives can be expressed as a\n[character class](http://www.pcre.org/original/doc/html/pcrepattern.html#SEC9),\nenclosed in square brackets (`[]`):\n\n```\n/foo|bar/.match(\"foo\")     # => #<Regex::MatchData \"foo\">\n/foo|bar/.match(\"bar\")     # => #<Regex::MatchData \"bar\">\n/_(x|y)_/.match(\"_x_\")     # => #<Regex::MatchData \"_x_\" 1: \"x\">\n/_(x|y)_/.match(\"_y_\")     # => #<Regex::MatchData \"_y_\" 1: \"y\">\n/_(x|y)_/.match(\"_(x|y)_\") # => nil\n/_(x|y)_/.match(\"_(x|y)_\") # => nil\n/_._/.match(\"_x_\")         # => #<Regex::MatchData \"_x_\">\n/_[xyz]_/.match(\"_x_\")     # => #<Regex::MatchData \"_x_\">\n/_[a-z]_/.match(\"_x_\")     # => #<Regex::MatchData \"_x_\">\n/_[^a-z]_/.match(\"_x_\")    # => nil\n/_[^a-wy-z]_/.match(\"_x_\") # => #<Regex::MatchData \"_x_\">\n```\n\nRegular expressions can be defined with these 3\n[optional flags](http://www.pcre.org/original/doc/html/pcreapi.html#SEC11):\n\n* `i`: ignore case (PCRE_CASELESS)\n* `m`: multiline (PCRE_MULTILINE and PCRE_DOTALL)\n* `x`: extended (PCRE_EXTENDED)\n\n```\n/asdf/ =~ \"ASDF\"    # => nil\n/asdf/i =~ \"ASDF\"   # => 0\n/^z/i =~ \"ASDF\\nZ\"  # => nil\n/^z/im =~ \"ASDF\\nZ\" # => 5\n```\n\nPCRE supports other encodings, but Crystal strings are UTF-8 only, so Crystal\nregular expressions are also UTF-8 only (by default).\n\nPCRE optionally permits named capture groups (named subpatterns) to not be\nunique. Crystal exposes the name table of a `Regex` as a\n`Hash` of `String` => `Int32`, and therefore requires named capture groups to have\nunique names within a single `Regex`.","summary":"<p>A <code><a href=\"Regex.html\">Regex</a></code> represents a regular expression, a pattern that describes the contents of strings.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/regex.cr#L5","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.object do\n  builder.string(\"$regularExpression\")\n  builder.object do\n    builder.string(\"pattern\")\n    builder.string(self.source)\n    builder.string(\"options\")\n    options = String.build do |str|\n      if self.options.includes?(:ignore_case)\n        str << \"i\"\n      end\n      if self.options.includes?(:multiline)\n        str << \"m\"\n      end\n      if self.options.includes?(:extended)\n        str << \"x\"\n      end\n      if self.options.includes?(:utf_8)\n        str << \"u\"\n      end\n    end\n    builder.string(options)\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/Slice","path":"Slice.html","kind":"struct","full_name":"Slice(T)","name":"Slice","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"github.com/elbywan/bson.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/elbywan/bson.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/ext/slice.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/slice.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `Slice` is a `Pointer` with an associated size.\n\nWhile a pointer is unsafe because no bound checks are performed when reading from and writing to it,\nreading from and writing to a slice involve bound checks.\nIn this way, a slice is a safe alternative to `Pointer`.\n\nA Slice can be created as read-only: trying to write to it\nwill raise. For example the slice of bytes returned by\n`String#to_slice` is read-only.","summary":"<p>A <code><a href=\"Slice.html\">Slice</a></code> is a <code>Pointer</code> with an associated size.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_canonical_extjson(builder:JSON::Builder,subtype=nil)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder,subtype=nil)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"},{"name":"subtype","doc":null,"default_value":"nil","external_name":"subtype","restriction":""}],"args_string":"(builder : JSON::Builder, subtype = <span class=\"n\">nil</span>)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/slice.cr#L5","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"},{"name":"subtype","doc":null,"default_value":"nil","external_name":"subtype","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.object do\n  builder.string(\"$binary\")\n  builder.object do\n    builder.string(\"base64\")\n    builder.string(Base64.strict_encode(self))\n    builder.string(\"subType\")\n    builder.string((subtype.try do |__arg0|\n      __arg0.value.to_s(16)\n    end || \"\").rjust(2, '0'))\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/String","path":"String.html","kind":"class","full_name":"String","name":"String","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/ext/string.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/string.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `String` represents an immutable sequence of UTF-8 characters.\n\nA `String` is typically created with a string literal, enclosing UTF-8 characters\nin double quotes:\n\n```\n\"hello world\"\n```\n\nA backslash can be used to denote some characters inside the string:\n\n```\n\"\\\"\" # double quote\n\"\\\\\" # backslash\n\"\\e\" # escape\n\"\\f\" # form feed\n\"\\n\" # newline\n\"\\r\" # carriage return\n\"\\t\" # tab\n\"\\v\" # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n\"\\u0041\" # == \"A\"\n```\n\nOr you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):\n\n```\n\"\\u{41}\" # == \"A\"\n```\n\nA string can span multiple lines:\n\n```\n\"hello\n      world\" # same as \"hello\\n      world\"\n```\n\nNote that in the above example trailing and leading spaces, as well as newlines,\nend up in the resulting string. To avoid this, you can split a string into multiple lines\nby joining multiple literals with a backslash:\n\n```\n\"hello \" \\\n\"world, \" \\\n\"no newlines\" # same as \"hello world, no newlines\"\n```\n\nAlternatively, a backslash followed by a newline can be inserted inside the string literal:\n\n```\n\"hello \\\n     world, \\\n     no newlines\" # same as \"hello world, no newlines\"\n```\n\nIn this case, leading whitespace is not included in the resulting string.\n\nIf you need to write a string that has many double quotes, parentheses, or similar\ncharacters, you can use alternative literals:\n\n```\n# Supports double quotes and nested parentheses\n%(hello (\"world\")) # same as \"hello (\\\"world\\\")\"\n\n# Supports double quotes and nested brackets\n%[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\"\n\n# Supports double quotes and nested curlies\n%{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\"\n\n# Supports double quotes and nested angles\n%<hello <\"world\">> # same as \"hello <\\\"world\\\">\"\n```\n\nTo create a `String` with embedded expressions, you can use string interpolation:\n\n```\na = 1\nb = 2\n\"sum = #{a + b}\" # \"sum = 3\"\n```\n\nThis ends up invoking `Object#to_s(IO)` on each expression enclosed by `#{...}`.\n\nIf you need to dynamically build a string, use `String#build` or `IO::Memory`.\n\n### Non UTF-8 valid strings\n\nString might end up being conformed of bytes which are an invalid\nbyte sequence according to UTF-8. This can happen if the string is created\nvia one of the constructors that accept bytes, or when getting a string\nfrom `String.build` or `IO::Memory`. No exception will be raised, but\ninvalid byte sequences, when asked as chars, will use the unicode replacement\nchar (value 0xFFFD). For example:\n\n```\n# here 255 is not a valid byte value in the UTF-8 encoding\nstring = String.new(Bytes[255, 97])\nstring.valid_encoding? # => false\n\n# The first char here is the unicode replacement char\nstring.chars # => ['�', 'a']\n```\n\nOne can also create strings with specific byte value in them by\nusing octal and hexadecimal escape sequences:\n\n```\n# Octal escape sequences\n\"\\101\" # # => \"A\"\n\"\\12\"  # # => \"\\n\"\n\"\\1\"   # string with one character with code point 1\n\"\\377\" # string with one byte with value 255\n\n# Hexadecimal escape sequences\n\"\\x41\" # # => \"A\"\n\"\\xFF\" # string with one byte with value 255\n```\n\nThe reason for allowing strings that don't have a valid UTF-8 sequence\nis that the world is full of content that isn't properly encoded,\nand having a program raise an exception or stop because of this\nis not good. It's better if programs are more resilient, but\nshow a replacement character when there's an error in incoming data.","summary":"<p>A <code><a href=\"String.html\">String</a></code> represents an immutable sequence of UTF-8 characters.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/string.cr#L5","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.string(self)"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/Time","path":"Time.html","kind":"struct","full_name":"Time","name":"Time","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/ext/time.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/time.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/elbywan/bson.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`Time` represents a date-time instant in\n[incremental time](https://www.w3.org/International/articles/definitions-time/#incremental_time)\nobserved in a specific time zone.\n\nThe calendaric calculations are based on the rules of the proleptic Gregorian\ncalendar as specified in [ISO 8601](http://xml.coverpages.org/ISO-FDIS-8601.pdf).\nLeap seconds are ignored.\n\nInternally, the time is stored as an `Int64` representing seconds from epoch\n(`0001-01-01 00:00:00.0 UTC`) and an `Int32` representing\nnanosecond-of-second with value range `0..999_999_999`.\n\nThe supported date range is `0001-01-01 00:00:00.0` to\n`9999-12-31 23:59:59.999_999_999` in any local time zone.\n\n### Telling the Time\n\nThere are several methods to retrieve a `Time` instance representing the\ncurrent time:\n\n```crystal\nTime.utc                                        # returns the current time in UTC\nTime.local Time::Location.load(\"Europe/Berlin\") # returns the current time in time zone Europe/Berlin\nTime.local                                      # returns the current time in current time zone\n```\n\nIt is generally recommended to keep instances in UTC and only apply a\nlocal time zone when formatting for user display, unless the domain logic\nrequires having a specific time zone (for example for calendaric operations).\n\n### Creating a Specific Instant\n\n`Time` instances representing a specific instant can be created by\n`.utc` or `.new` with the date-time specified as individual arguments:\n\n```\ntime = Time.utc(2016, 2, 15, 10, 20, 30)\ntime.to_s # => 2016-02-15 10:20:30 UTC\ntime = Time.local(2016, 2, 15, 10, 20, 30, location: Time::Location.load(\"Europe/Berlin\"))\ntime.to_s # => 2016-02-15 10:20:30 +01:00 Europe/Berlin\n# The time-of-day can be omitted and defaults to midnight (start of day):\ntime = Time.utc(2016, 2, 15)\ntime.to_s # => 2016-02-15 00:00:00 UTC\n```\n\n### Retrieving Time Information\n\nEach `Time` instance allows querying calendar data:\n\n```\ntime = Time.utc(2016, 2, 15, 10, 20, 30)\ntime.year        # => 2016\ntime.month       # => 2\ntime.day         # => 15\ntime.hour        # => 10\ntime.minute      # => 20\ntime.second      # => 30\ntime.millisecond # => 0\ntime.nanosecond  # => 0\ntime.day_of_week # => Time::DayOfWeek::Monday\ntime.day_of_year # => 46\ntime.monday?     # => true\ntime.time_of_day # => 10:20:30\n```\n\nFor querying if a time is at a specific day of week, `Time` offers named\npredicate methods, delegating to `#day_of_week`:\n\n```\ntime.monday? # => true\n# ...\ntime.sunday? # => false\n```\n\n### Time Zones\n\nEach time is attached to a specific time zone, represented by a `Location`\n(see `#location`).\n`#zone` returns the time zone observed in this location at the current time\n(i.e. the instant represented by this `Time`).\n`#offset` returns the offset of the current zone in seconds.\n\n```\ntime = Time.local(2018, 3, 8, 22, 5, 13, location: Time::Location.load(\"Europe/Berlin\"))\ntime          # => 2018-03-08 22:05:13 +01:00 Europe/Berlin\ntime.location # => #<Time::Location Europe/Berlin>\ntime.zone     # => #<Time::Location::Zone CET +01:00 (3600s) STD>\ntime.offset   # => 3600\n```\n\nUsing `.utc`, the location is `Time::Location::UTC`:\n\n```\ntime = Time.utc(2018, 3, 8, 22, 5, 13)\ntime          # => 2018-03-08 22:05:13.0 UTC\ntime.location # => #<Time::Location UTC>\ntime.zone     # => #<Time::Location::Zone UTC +00:00 (0s) STD>\ntime.offset   # => 0\n```\n\nA `Time` instance can be transformed to a different time zone while retaining\nthe same instant using `#in`:\n\n```\ntime_de = Time.local(2018, 3, 8, 22, 5, 13, location: Time::Location.load(\"Europe/Berlin\"))\ntime_ar = time_de.in Time::Location.load(\"America/Buenos_Aires\")\ntime_de # => 2018-03-08 22:05:13 +01:00 Europe/Berlin\ntime_ar # => 2018-03-08 18:05:13 -03:00 America/Buenos_Aires\n```\n\nBoth `Time` instances show a different local date-time, but they represent\nthe same date-time in the instant time-line, therefore they are considered\nequal:\n\n```\ntime_de.to_utc     # => 2018-03-08 21:05:13 UTC\ntime_ar.to_utc     # => 2018-03-08 21:05:13 UTC\ntime_de == time_ar # => true\n```\n\nThere are also two special methods for converting to UTC and local time zone:\n\n```\ntime.to_utc   # equals time.in(Location::UTC)\ntime.to_local # equals time.in(Location.local)\n```\n\n`#to_local_in` allows changing the time zone while keeping\nthe same local date-time (wall clock) which results in a different instant\non the time line.\n\n### Formatting and Parsing Time\n\nTo make date-time instances exchangeable between different computer systems\nor readable to humans, they are usually converted to and from a string\nrepresentation.\n\nThe method `#to_s` formats the date-time according to a specified pattern.\n\n```\ntime = Time.utc(2015, 10, 12, 10, 30, 0)\ntime.to_s(\"%Y-%m-%d %H:%M:%S %:z\") # => \"2015-10-12 10:30:00 +00:00\"\n```\n\nSimilarly, `Time.parse` and `Time.parse!` are used to construct a `Time` instance from date-time\ninformation in a string, according to a specified pattern:\n\n```\nTime.parse(\"2015-10-12 10:30:00 +00:00\", \"%Y-%m-%d %H:%M:%S %z\", Time::Location::UTC)\nTime.parse!(\"2015-10-12 10:30:00 +00:00\", \"%Y-%m-%d %H:%M:%S %z\")\n```\n\nSee `Time::Format` for all directives.\n\n### Calculations\n\n```\nTime.utc(2015, 10, 10) - 5.days # => 2015-10-05 00:00:00 +00:00\n\nspan = Time.utc(2015, 10, 10) - Time.utc(2015, 9, 10)\nspan.days          # => 30\nspan.total_hours   # => 720\nspan.total_minutes # => 43200\n```\n\n## Measuring Time\n\nThe typical time representation provided by the operating system is based on\na \"wall clock\" which is subject to changes for clock synchronization.\nThis can result in discontinuous jumps in the time-line making it not\nsuitable for accurately measuring elapsed time.\n\nInstances of `Time` are focused on telling time – using a \"wall clock\".\nWhen `Time.local` is called multiple times, the difference between the\nreturned instances is not guaranteed to equal to the time elapsed between\nmaking the calls; even the order of the returned `Time` instances might\nnot reflect invocation order.\n\n```\nt1 = Time.utc\n# operation that takes 1 minute\nt2 = Time.utc\nt2 - t1 # => ?\n```\n\nThe resulting `Time::Span` could be anything, even negative, if the\ncomputer's wall clock has changed between both calls.\n\nAs an alternative, the operating system also provides a monotonic clock.\nIts time-line has no specfied starting point but is strictly linearly\nincreasing.\n\nThis monotonic clock should always be used for measuring elapsed time.\n\nA reading from this clock can be taken using `.monotonic`:\n\n```\nt1 = Time.monotonic\n# operation that takes 1 minute\nt2 = Time.monotonic\nt2 - t1 # => 1.minute (approximately)\n```\n\nThe execution time of a block can be measured using `.measure`:\n\n```\nelapsed_time = Time.measure do\n  # operation that takes 20 milliseconds\nend\nelapsed_time # => 20.milliseconds (approximately)\n```","summary":"<p><code><a href=\"Time.html\">Time</a></code> represents a date-time instant in <a href=\"https://www.w3.org/International/articles/definitions-time/#incremental_time\" target=\"_blank\">incremental time</a> observed in a specific time zone.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/time.cr#L5","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.object do\n  builder.string(\"$date\")\n  builder.object do\n    builder.string(\"$numberLong\")\n    builder.string(self.to_unix_ms.to_s)\n  end\nend"}},{"id":"to_relaxed_extjson(builder:JSON::Builder)-instance-method","html_id":"to_relaxed_extjson(builder:JSON::Builder)-instance-method","name":"to_relaxed_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/time.cr#L18","def":{"name":"to_relaxed_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.object do\n  builder.string(\"$date\")\n  builder.string(self.to_rfc3339)\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/elbywan/bson.cr/UUID","path":"UUID.html","kind":"struct","full_name":"UUID","name":"UUID","abstract":false,"superclass":{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/elbywan/bson.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/elbywan/bson.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/elbywan/bson.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"bson/ext/uuid.cr","line_number":1,"url":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/uuid.cr"}],"repository_name":"github.com/elbywan/bson.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Represents a UUID (Universally Unique IDentifier).","summary":"<p>Represents a UUID (Universally Unique IDentifier).</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","html_id":"to_canonical_extjson(builder:JSON::Builder)-instance-method","name":"to_canonical_extjson","doc":"Serialize to a canonical extended json representation.\n\nNOTE: see https://github.com/mongodb/specifications/blob/master/source/extended-json.rst","summary":"<p>Serialize to a canonical extended json representation.</p>","abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"args_string":"(builder : JSON::Builder)","source_link":"https://github.com/elbywan/bson.cr/blob/b887eb7cc0a232577ab438964b51f5028fa1f84a/src/bson/ext/uuid.cr#L5","def":{"name":"to_canonical_extjson","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"JSON::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"builder.object do\n  builder.string(\"$binary\")\n  builder.object do\n    builder.string(\"base64\")\n    builder.string(Base64.strict_encode(self.bytes))\n    builder.string(\"subType\")\n    builder.string((4.to_s(16)).rjust(2, '0'))\n  end\nend"}}],"macros":[],"types":[]}]}}